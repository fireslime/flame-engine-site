{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/box2d.md","result":{"data":{"markdownRemark":{"html":"<h1 id=\"box2d\" style=\"position:relative;\"><a href=\"#box2d\" aria-label=\"box2d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box2D</h1>\n<p>Although Flame does not implements Box2d itself, it bundles a forked port of the Java Box2d to Dart by Google.</p>\n<p>The source of the bundled box2d on Flame can be found <a href=\"https://github.com/flame-engine/box2d.dart\">here</a>.</p>\n<p>There is a simple example game <a href=\"https://github.com/feroult/haunt\">here</a> that can be used as reference of how to use box2d on Flame, although it is a little bit outdated and doesn't use <code class=\"language-text\">Box2DGame</code>.</p>\n<p>There are some updated examples of how to use it <a href=\"https://github.com/flame-engine/flame/blob/master/doc/examples/box2d\">here</a>, but they are not full game implementations.</p>\n<h2 id=\"basegame-extension\" style=\"position:relative;\"><a href=\"#basegame-extension\" aria-label=\"basegame extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BaseGame extension</h2>\n<p>If you are going to use Box2D in your project it can be a good idea to use the Box2D specific extension of the <code class=\"language-text\">BaseGame</code> class.</p>\n<p>It is called <code class=\"language-text\">Box2DGame</code> and it will control the adding and removal of Box2D's BodyComponents from your root <code class=\"language-text\">Box2DComponent</code>.</p>\n<p>A simple <code class=\"language-text\">Box2DGame</code> implementation example can be seen in the <a href=\"https://github.com/flame-engine/flame/blob/master/doc/examples/box2d/simple\">examples folder</a>.</p>\n<h2 id=\"contact-callbacks\" style=\"position:relative;\"><a href=\"#contact-callbacks\" aria-label=\"contact callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contact callbacks</h2>\n<p>If you are using <code class=\"language-text\">Box2DGame</code> you can take advantage of its way of handling contacts between two <code class=\"language-text\">BodyComponent</code>s.</p>\n<p>When creating the body definition for your <code class=\"language-text\">BodyComponent</code> make sure that you set the userdata to the current object, otherwise it will not be possible to detect collisions.\nLike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> bodyDef <span class=\"token operator\">=</span> <span class=\"token function\">BodyDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// To be able to determine object in collision</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you have to make an implementation of <code class=\"language-text\">ContactCallback</code> where you set which two types that it should react when they come in contact.\nIf you have two <code class=\"language-text\">BodyComponent</code>s named Ball and Wall and you want to do something when they come in contact you would do like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BallWallCallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ContactCallback</span><span class=\"token operator\">&lt;</span>Ball<span class=\"token punctuation\">,</span> Wall<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">BallWallCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>Ball ball<span class=\"token punctuation\">,</span> Wall wall<span class=\"token punctuation\">,</span> Contact contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    wall<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>Ball ball<span class=\"token punctuation\">,</span> Wall wall<span class=\"token punctuation\">,</span> Contact contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and then you simply add <code class=\"language-text\">BallWallCallback</code> to your <code class=\"language-text\">Box2DGame</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Box2DGame</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyGame</span><span class=\"token punctuation\">(</span>Box2DComponent box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContactCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">BallWallCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every time <code class=\"language-text\">Ball</code> and <code class=\"language-text\">Wall</code> gets in contact <code class=\"language-text\">begin</code> will be called, and once the objects stop being in contact <code class=\"language-text\">end</code> will be called.</p>\n<p>If you want an object to interact with all other bodies, put <code class=\"language-text\">BodyComponent</code> as the one of the parameters of your <code class=\"language-text\">ContactCallback</code> like this:</p>\n<p><code class=\"language-text\">class BallAnythingCallback implements ContactCallback&lt;Ball, BodyComponent&gt; ...</code></p>\n<p>An implementation example can be seen in the <a href=\"https://github.com/flame-engine/flame/blob/master/doc/examples/box2d/contact_callbacks\">examples folder</a>.</p>","frontmatter":{"path":"/docs/box2d.md","title":"Box2D"}}},"pageContext":{}}}