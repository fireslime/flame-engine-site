{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/game.md","result":{"data":{"markdownRemark":{"html":"<h1 id=\"game-loop\" style=\"position:relative;\"><a href=\"#game-loop\" aria-label=\"game loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Game Loop</h1>\n<p>The Game Loop module is a simple abstraction over the game loop concept. Basically most games are built upon two methods:</p>\n<ul>\n<li>The render method takes the canvas ready for drawing the current state of the game.</li>\n<li>The update method receives the delta time in seconds since last update and allows you to move to the next state.</li>\n</ul>\n<p>The class <code class=\"language-text\">Game</code> can be subclassed and will provide among others, these gameloop methods.\nAlso, a <code class=\"language-text\">Game</code> subclass instance can be added to a Flutter widget tree via the <code class=\"language-text\">GameWidget</code>.</p>\n<p>You can add it into the top of you tree (directly as an argument to <code class=\"language-text\">runApp</code>) or inside the usual app-like widget structure (with scaffold, routes, etc.).</p>\n<p>Example of usage directly into <code class=\"language-text\">runApp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>\n          <span class=\"token function\">GameWidget</span><span class=\"token punctuation\">(</span>\n            game<span class=\"token punctuation\">:</span> <span class=\"token function\">MyGameSubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is important to notice that <code class=\"language-text\">Game</code> is an abstract class with just the very basic implementations of the gameloop.</p>\n<p>As an option and more suitable for most cases, there is the full-featured <code class=\"language-text\">BaseGame</code> class. For example, Forge2D games uses <code class=\"language-text\">Forge2DGame</code> class;</p>\n<p>The <code class=\"language-text\">BaseGame</code> implements a <code class=\"language-text\">Component</code> based <code class=\"language-text\">Game</code> for you; basically it has a list of <code class=\"language-text\">Component</code>s and passes the <code class=\"language-text\">update</code> and <code class=\"language-text\">render</code> calls appropriately. You can still extend those methods to add custom behavior, and you will get a few other features for free, like the passing of <code class=\"language-text\">resize</code> methods (every time the screen is resized the information will be passed to the resize methods of all your components) and also a basic camera feature. The <code class=\"language-text\">BaseGame.camera</code> controls which point in coordinate space should be the top-left of the screen (defaults to [0,0] like a regular <code class=\"language-text\">Canvas</code>).</p>\n<p>A very simple <code class=\"language-text\">BaseGame</code> implementation example can be seen below:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCrate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpriteComponent</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// creates a component that renders the crate.png sprite, with size 16 x 16</span>\n        <span class=\"token function\">MyCrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSprite</span><span class=\"token punctuation\">(</span><span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crate.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token metadata symbol\">@override</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">onGameResize</span><span class=\"token punctuation\">(</span>Size size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// we don't need to set the x and y in the constructor, we can set then here</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseGame</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MyGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will call resize the first time as well</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>To remove components from the list on a <code class=\"language-text\">BaseGame</code> the <code class=\"language-text\">markToRemove</code> method can be used.</p>\n<h2 id=\"flutter-widgets-and-game-instances\" style=\"position:relative;\"><a href=\"#flutter-widgets-and-game-instances\" aria-label=\"flutter widgets and game instances permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter Widgets and Game instances</h2>\n<p>Since a Flame game can be wrapped in a widget, it is quite easy to use it alongside other Flutter widgets. But still, there is a the Widgets overlay API that makes things even easier.</p>\n<p>Flame provides a <code class=\"language-text\">mixin</code> called <code class=\"language-text\">HasWidgetsOverlay</code> which will enable any Flutter widget to be shown on top of your game instance, this makes it very easy to create things like a pause menu, or an inventory screen for example.</p>\n<p>To use it, simple add the <code class=\"language-text\">HasWidgetsOverlay</code> <code class=\"language-text\">mixin</code> on your game class, by doing so, the game class will have a <code class=\"language-text\">.overlays</code> property that will be used to manage the active overlays.<br>\nThis management happens via the <code class=\"language-text\">.overlays.add</code> and <code class=\"language-text\">.overlays.remove</code> methods that marks a overlay to be shown and hidden, respectively, via a <code class=\"language-text\">String</code> argument that identifies a overlay.<br>\nAfter that, it can be specified which widgets represents each overlay, in the <code class=\"language-text\">GameWidget</code> declaration using the <code class=\"language-text\">GameWidget.withOverlay</code> constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// inside game methods:</span>\n\n<span class=\"token keyword\">final</span> pauseOverlayIdentifier <span class=\"token operator\">=</span> <span class=\"token string\">\"PauseMenu\"</span><span class=\"token punctuation\">;</span>\noverlays<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pauseOverlayIdentifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// marks \"PauseMenu\" to be rendered.</span>\noverlays<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>pauseOverlayIdentifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// marks \"PauseMenu\" to not be rendered.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// on the widget declaration</span>\n\n<span class=\"token keyword\">return</span> GameWidget<span class=\"token punctuation\">.</span><span class=\"token function\">withOverlay</span><span class=\"token punctuation\">(</span>\n  game<span class=\"token punctuation\">:</span> <span class=\"token function\">MyGameSubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// MyGameSubClass has to be mixed with `HasWidgetsOverlay` </span>\n  overlayBuilderMap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"PauseMenu\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// notice the overlay identifier</span>\n      <span class=\"token keyword\">return</span> Positioned<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// Overlays are rendered directly under a stack, so Positioned are eligible</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a pause menu\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The order in which the overlays are declared on the <code class=\"language-text\">overlayBuilderMap</code> defines which overlay will be rendered first.</p>\n<p>Here you can see a <a href=\"https://github.com/flame-engine/flame/blob/master/doc/examples/with_widgets_overlay\">working example</a> of this feature.</p>\n<h2 id=\"basegame-debug-mode\" style=\"position:relative;\"><a href=\"#basegame-debug-mode\" aria-label=\"basegame debug mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BaseGame debug mode</h2>\n<p>Flame's <code class=\"language-text\">BaseGame</code> class provides a method called <code class=\"language-text\">debugMode</code>, which by default returns false. It can however, be overridden to enable debug features over the components of the game. <strong>Be aware</strong> that the state returned by this method is passed through its component when they added to the game, so if you change the <code class=\"language-text\">debugMode</code> in runtime, it may not affect already added components.</p>\n<p>To see more about debugMode on Flame, please refer to the <a href=\"/docs/debug.md\">Debug Docs</a></p>","frontmatter":{"path":"/docs/game.md","title":"Game Loop"}}},"pageContext":{}},"staticQueryHashes":["3000541721","3000541721","3595947586"]}