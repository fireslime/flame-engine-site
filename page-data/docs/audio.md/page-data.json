{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/audio.md","result":{"data":{"markdownRemark":{"html":"<h1 id=\"audio\" style=\"position:relative;\"><a href=\"#audio\" aria-label=\"audio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Audio</h1>\n<p>To play an audio is really simple!</p>\n<p>Start by adding an entry in your <code class=\"language-text\">pubspec.yaml</code> for each file you want to use (and make sure that the files exist in the paths that you provide).</p>\n<p>For the examples below, your <code class=\"language-text\">pubspec.yaml</code> file needs to contain something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">flutter</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">assets</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> assets/audio/explosion.mp3\n    <span class=\"token punctuation\">-</span> assets/audio/music.mp3</code></pre></div>\n<p>Then simply run:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token keyword\">import</span> <span class=\"token string\">'package:flame/flame.dart'</span><span class=\"token punctuation\">;</span>\n\n    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'explosion.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">playLongAudio</span><span class=\"token punctuation\">(</span><span class=\"token string\">'music.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or, if you prefer:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token keyword\">import</span> <span class=\"token string\">'package:flame/flame_audio.dart'</span><span class=\"token punctuation\">;</span>\n\n    FlameAudio audio <span class=\"token operator\">=</span> <span class=\"token function\">FlameAudio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    audio<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">'explosion.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Or</span>\n    audio<span class=\"token punctuation\">.</span><span class=\"token function\">playLongAudio</span><span class=\"token punctuation\">(</span><span class=\"token string\">'music.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The difference is that each instance shares a different cache. Normally you would want to use the <code class=\"language-text\">Flame.audio</code> instance and totally share the cache.</p>\n<p>You must have an appropriate folder structure and add the files to the <code class=\"language-text\">pubspec.yaml</code> file, as explained above.</p>\n<p>It can be an MP3, OGG or a WAV file (those are the ones I tested and it worked)</p>\n<p>This uses the <a href=\"https://github.com/luanpotter/audioplayer\">audioplayers</a> lib, in order to allow playing multiple sounds simultaneously (crucial in a game). You can check the link for more in-depth explanations.</p>\n<p>If you want to play indefinitely, just use <code class=\"language-text\">loop</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'music.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Or</span>\n    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">loopLongAudio</span><span class=\"token punctuation\">(</span><span class=\"token string\">'music.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alternatively, you can use <a href=\"/docs/bgm.md\">the <code class=\"language-text\">Bgm</code> class (via <code class=\"language-text\">Flame.bgm</code>)</a> to play looping background music tracks. The <code class=\"language-text\">Bgm</code> class lets Flame manage the auto pausing and resuming of background music tracks when pausing/resuming the game/app.</p>\n<p>The difference between the <code class=\"language-text\">play/loop</code> and <code class=\"language-text\">playLongAudio/loopLongAudio</code> is that <code class=\"language-text\">play/loop</code> makes uses of optimized features that allow sounds to be looped without gaps between their iterations, and almost no drop on the game frame rate will happen. You should whenever possible, prefer these methods. <code class=\"language-text\">playLongAudio/loopLongAudio</code> allows for audios of any length to be played, but they do create frame rate drop, and the looped audio will feature a small gap between iterations.</p>\n<p>Finally, you can pre-load your audios. Audios need to be stored in the memory the first time they are requested; therefore, the first time you play each mp3 you might get a delay. In order to pre-load your audios, just use:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">'explosion.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can load all your audios in beginning so that they always play smoothly; to load multiple audios, use the <code class=\"language-text\">loadAll</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">loadAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'explosion.mp3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'music.mp3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, you can use the <code class=\"language-text\">clear</code> method to remove something from the cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token string\">'explosion.mp3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There is also a <code class=\"language-text\">clearAll</code> method, that clears the whole cache.</p>\n<p>This might be useful if, for instance, your game has multiple levels and each has a different soundtrack.</p>\n<p>Both load methods return a <code class=\"language-text\">Future</code> for the <code class=\"language-text\">File</code>s loaded.</p>\n<p>Both on <code class=\"language-text\">play</code> and <code class=\"language-text\">loop</code> you can pass an additional optional double parameter, the <code class=\"language-text\">volume</code> (defaults to <code class=\"language-text\">1.0</code>).</p>\n<p>Both the <code class=\"language-text\">play</code> and <code class=\"language-text\">loop</code> methods return an instance of a <code class=\"language-text\">AudioPlayer</code> from the <a href=\"https://github.com/luanpotter/audioplayer\">audioplayers</a> lib, that allows you to stop, pause and configure other specifications.</p>\n<p>There's lots of logs; that's reminiscent of the original AudioPlayer plugin. Useful while debug, but afterwards you can disable them with:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Flame<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">disableLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"path":"/docs/audio.md","title":"General Audio"}}},"pageContext":{}}}