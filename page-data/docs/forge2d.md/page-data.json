{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/forge2d.md","result":{"data":{"markdownRemark":{"html":"<h1 id=\"forge2d\" style=\"position:relative;\"><a href=\"#forge2d\" aria-label=\"forge2d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forge2D</h1>\n<p>We (the Flame organization) maintains a ported version of the Box2D physics engine and our version is called Forge2D.</p>\n<p>If you want to use Forge2D specifically for Flame you should use our bridge library <a href=\"https://github.com/flame-engine/flame_forge2d\">flame_forge2d</a>.</p>\n<p>To use it in your game you just need to add flame<em>forge2d to your pubspec.yaml, which can be seen in the [Forge2D example](<a href=\"https://github.com/flame-engine/flame\">https://github.com/flame-engine/flame</a></em>forge2d/tree/master/example).</p>\n<p>The Forge2D project itself can be found <a href=\"https://github.com/flame-engine/forge2d\">here</a>, and it can be used in any Dart project.</p>\n<h2 id=\"forge2dgame-basegame-extension\" style=\"position:relative;\"><a href=\"#forge2dgame-basegame-extension\" aria-label=\"forge2dgame basegame extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forge2DGame (BaseGame extension)</h2>\n<p>If you are going to use Forge2D in your project it can be a good idea to use the Forge2D specific extension of the <code class=\"language-text\">BaseGame</code> class.</p>\n<p>It is called <code class=\"language-text\">Forge2DGame</code> and it will control the adding and removal of Forge2D's BodyComponents as well as your normal components.</p>\n<p>The whole concept of a box2d's world is mapped to <code class=\"language-text\">world</code> in the <code class=\"language-text\">Forge2DGame</code> component; every Body should be a <code class=\"language-text\">BodyComponent</code>, and added to the <code class=\"language-text\">Forge2DGame</code>.</p>\n<p>You can have for example a HUD and other non-physics-related components in your `Forge2DGame's component list along with your physical entities. When the update is called, it will use the Forge2D physics engine to properly update every child.</p>\n<p>Simple <code class=\"language-text\">Forge2DGame</code> implementation examples can be seen in the <a href=\"https://github.com/flame-engine/flame_box2d/blob/master/examples/\">examples folder</a>.</p>\n<h2 id=\"bodycomponent\" style=\"position:relative;\"><a href=\"#bodycomponent\" aria-label=\"bodycomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BodyComponent</h2>\n<p>If you don't need to have a sprite on top of your body you should use the plain BodyComponent, for example if you want a circle, rectangle or polygon but only painted with a Flutter <code class=\"language-text\">Paint</code>.</p>\n<h2 id=\"spritebodycomponent\" style=\"position:relative;\"><a href=\"#spritebodycomponent\" aria-label=\"spritebodycomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SpriteBodyComponent</h2>\n<p>Often you want to render a sprite on top of the BodyComponent that you are going to use in your Forge2DGame. This component will handle the scaling and positioning of your sprite on top of the body.</p>\n<h2 id=\"contact-callbacks\" style=\"position:relative;\"><a href=\"#contact-callbacks\" aria-label=\"contact callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contact callbacks</h2>\n<p>If you are using <code class=\"language-text\">Forge2DGame</code> you can take advantage of its way of handling contacts between two <code class=\"language-text\">BodyComponent</code>s.</p>\n<p>When creating the body definition for your <code class=\"language-text\">BodyComponent</code> make sure that you set the userdata to the current object, otherwise it will not be possible to detect collisions.\nLike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> bodyDef <span class=\"token operator\">=</span> <span class=\"token function\">BodyDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// To be able to determine object in collision</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you have to make an implementation of <code class=\"language-text\">ContactCallback</code> where you set which two types that it should react when they come in contact.\nIf you have two <code class=\"language-text\">BodyComponent</code>s named Ball and Wall and you want to do something when they come in contact you would do like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BallWallCallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ContactCallback</span><span class=\"token operator\">&lt;</span>Ball<span class=\"token punctuation\">,</span> Wall<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">BallWallCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>Ball ball<span class=\"token punctuation\">,</span> Wall wall<span class=\"token punctuation\">,</span> Contact contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    wall<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>Ball ball<span class=\"token punctuation\">,</span> Wall wall<span class=\"token punctuation\">,</span> Contact contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and then you simply add <code class=\"language-text\">BallWallCallback</code> to your <code class=\"language-text\">Forge2DGame</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Forge2DGame</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyGame</span><span class=\"token punctuation\">(</span>Forge2DComponent box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContactCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">BallWallCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every time <code class=\"language-text\">Ball</code> and <code class=\"language-text\">Wall</code> gets in contact <code class=\"language-text\">begin</code> will be called, and once the objects stop being in contact <code class=\"language-text\">end</code> will be called.</p>\n<p>If you want an object to interact with all other bodies, put <code class=\"language-text\">BodyComponent</code> as the one of the parameters of your <code class=\"language-text\">ContactCallback</code> like this:</p>\n<p><code class=\"language-text\">class BallAnythingCallback implements ContactCallback&lt;Ball, BodyComponent&gt; ...</code></p>\n<p>An implementation example can be seen in the <a href=\"https://github.com/flame-engine/flame_forge2d/blob/master/example\">Flame Forge2D example</a>.</p>\n<h2 id=\"viewport\" style=\"position:relative;\"><a href=\"#viewport\" aria-label=\"viewport permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Viewport</h2>\n<p>If you see you screen as a window and the outside as the Forge2D world, then the <code class=\"language-text\">Viewport</code> is the part of the world outside that you can see through the window, so the parts that you can see on your screen.</p>\n<p>The viewport might move around the world if your game is larger than your screen and it can be very useful if you want to follow a body in the world, for example a player, then you can use the <code class=\"language-text\">viewport.cameraFollow(body)</code> method, but remember that it has to be called every update.</p>","frontmatter":{"path":"/docs/forge2d.md","title":"Forge2D"}}},"pageContext":{}},"staticQueryHashes":["3000541721","3000541721","3595947586"]}