{"data":{"markdownRemark":{"html":"<h1>Util</h1>\n<p>Some stuff just doesn't fit anywhere else.</p>\n<h2>Position</h2>\n<p>Throughout the variety of modules needed to build a game, Dart and Flutter have a few different classes to handle the concept of a 2D double point; specially common in the APIs are math.Point and ui.Offset.</p>\n<p>The Position class is an utility class that helps by allowing easy conversions to and from these type.</p>\n<p>It also differs from the default implementations provided (math.Point and ui.Offset) as it's mutable and offers some useful methods for manipulation.</p>\n<h2>Util Class</h2>\n<p>This class, accessible via <code class=\"language-text\">Flame.util</code>, has some sparse functions that are independent and good to have. They are:</p>\n<ul>\n<li>fullScreen : call once in the main method, makes your app full screen (no top nor bottom bars)</li>\n<li>addGestureRecognizer discussed <a href=\"#Input\">here</a></li>\n<li>text : discussed <a href=\"#Text\">here</a></li>\n<li>initialDimensions : returns a Future with the dimension (Size) of the screen. This has to be done in a hacky way because of the reasons described in the code. If you are using <code class=\"language-text\">BaseGame</code>, you probably won't need to use these, as very <code class=\"language-text\">Component</code> will receive this information</li>\n<li>drawWhere : a very simple function that manually applies an offset to a canvas, render stuff given via a function and then reset the canvas, without using the canvas built-in save/restore functionality. This might be useful because <code class=\"language-text\">BaseGame</code> uses the state of the canvas, and you should not mess with it.</li>\n</ul>","frontmatter":{"path":"/docs/util","title":"Util"}}},"pageContext":{}}