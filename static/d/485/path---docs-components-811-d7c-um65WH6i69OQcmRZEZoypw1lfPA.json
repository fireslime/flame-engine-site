{"data":{"markdownRemark":{"html":"<h1 id=\"components\"><a href=\"#components\" aria-label=\"components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components</h1>\n<p>This class represent a single object on the screen, being a floating rectangle or a rotating sprite.</p>\n<p>The base abstract class has the common expected methods update and render to be implemented.</p>\n<p>The intermediate inheritance <code class=\"language-text\">PositionComponent</code> adds <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>, <code class=\"language-text\">width</code>, <code class=\"language-text\">height</code> and <code class=\"language-text\">angle</code> to your Components, as well as some useful methods like distance and angleBetween.</p>\n<p>The most commonly used implementation, <code class=\"language-text\">SpriteComponent</code>, can be created with a <code class=\"language-text\">Sprite</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'package:flame/components/component.dart'</span><span class=\"token punctuation\">;</span>\n\nSprite sprite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> <span class=\"token number\">128.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpriteComponent<span class=\"token punctuation\">.</span>fromSprite</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> sprite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// width, height, sprite</span>\n\n<span class=\"token comment\">// screen coordinates</span>\nplayer<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 0 by default</span>\nplayer<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 0 by default</span>\nplayer<span class=\"token punctuation\">.</span>angle <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 0 by default</span>\n\nplayer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// it will render only if the image is loaded and the x, y, width and height parameters are not null</span></code></pre></div>\n<p>Every <code class=\"language-text\">Component</code> has a few other methods that you can optionally implement, that are used by the <code class=\"language-text\">BaseGame</code> class. If you are not using the base game, you can alternatively use these methods on your own game loop.</p>\n<p>The <code class=\"language-text\">resize</code> method is called whenever the screen is resized, and in the beginning once when the component is added via the <code class=\"language-text\">add</code> method. You need to apply here any changes to the x, y, width and height of your component, or any other changes, due to the screen resizing. You can start these variables here, as the sprite won't be rendered until everything is set.</p>\n<p>The <code class=\"language-text\">destroy</code> method can be implemented to return true and warn the <code class=\"language-text\">BaseGame</code> that your object is marked for destruction, and it will be remove after the current update loop. It will then no longer be rendered or updated.</p>\n<p>The <code class=\"language-text\">isHUD</code> method can be implemented to return true (default false) to make the <code class=\"language-text\">BaseGame</code> ignore the <code class=\"language-text\">camera</code> for this element.</p>\n<p>There are also other implementations:</p>\n<ul>\n<li>The <code class=\"language-text\">AnimationComponent</code> takes an <code class=\"language-text\">Animation</code> object and renders a cyclic animated sprite (more details about Animations <a href=\"/docs/images#animation\">here</a>)</li>\n<li>The <code class=\"language-text\">ParallaxComponent</code> can render a parallax background with several frames</li>\n<li>The <code class=\"language-text\">Box2DComponent</code>, that has a physics engine built-in (using the <a href=\"https://github.com/google/box2d.dart\">Box2D</a> port for Dart)</li>\n</ul>\n<h2 id=\"animation-component\"><a href=\"#animation-component\" aria-label=\"animation component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation Component</h2>\n<p>This component uses an instance of the <a href=\"/docs/images#animation\">Animation</a> class to represent a Component that has a sprite that runs a single cyclic animation.</p>\n<p>This will create a simple three frame animation</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">List<span class=\"token operator\">&lt;</span>Sprite<span class=\"token operator\">></span> sprites <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player_${i}.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimationComponent</span><span class=\"token punctuation\">(</span><span class=\"token number\">64.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animation<span class=\"token punctuation\">.</span>spriteList</span><span class=\"token punctuation\">(</span>sprites<span class=\"token punctuation\">,</span> stepTime<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you have a spritesheet, you can use the <code class=\"language-text\">sequenced</code> constructor, identical to the one provided by the <code class=\"language-text\">Animation</code> class (check more details in <a href=\"/docs/images#animation\">the appropriate section</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimationComponent<span class=\"token punctuation\">.</span>sequenced</span><span class=\"token punctuation\">(</span><span class=\"token number\">64.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'player.png'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you are not using <code class=\"language-text\">BaseGame</code>, don't forget this component needs to be update'd even if static, because the animation object needs to be ticked to move the frames.</p>\n<h2 id=\"composed-component\"><a href=\"#composed-component\" aria-label=\"composed component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composed component</h2>\n<p>A mixin that helps you to make a <code class=\"language-text\">Component</code> wraps other components. It is useful to group visual components through a hierarchy. When implemented, makes every item in its <code class=\"language-text\">components</code> collection field be updated and rendered with the same conditions.</p>\n<p>Example of usage, where visibility of two components are handled by a wrapper:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GameOverPanel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PositionComponent</span> <span class=\"token keyword\">with</span> Resizable<span class=\"token punctuation\">,</span> ComposedComponent <span class=\"token punctuation\">{</span>\n  bool visible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  GameOverText gameOverText<span class=\"token punctuation\">;</span>\n  GameOverButton gameOverButton<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">GameOverPanel</span><span class=\"token punctuation\">(</span>Image spriteImage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gameOverText <span class=\"token operator\">=</span> <span class=\"token function\">GameOverText</span><span class=\"token punctuation\">(</span>spriteImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GameOverText is a Component</span>\n    gameOverButton <span class=\"token operator\">=</span> <span class=\"token function\">GameOverButton</span><span class=\"token punctuation\">(</span>spriteImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GameOverRestart is a SpriteComponent</span>\n\n    components<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gameOverText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>gameOverButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Canvas canvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// If not, neither of its `components` will be rendered</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parallax-component\"><a href=\"#parallax-component\" aria-label=\"parallax component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parallax Component</h2>\n<p>This Component can be used to render pretty backgrounds, by drawing several transparent images on top of each other, each dislocated by a tiny amount.</p>\n<p>The rationale is that when you look at the horizon and moving, closer objects seem to move faster than distant ones.</p>\n<p>This component simulates this effect, making a very realistic background.</p>\n<p>Create it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ParallaxComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bg<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token string\">'bg/1.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bg/2.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bg/3.png'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, render it as any other component.</p>\n<p>Like the AnimationComponent, even if your parallax is static, you must call update on this component, so it runs its animation.</p>\n<h2 id=\"box2d-component\"><a href=\"#box2d-component\" aria-label=\"box2d component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box2D Component</h2>\n<p>Flame comes with a basic integration with the Flutter implementation of <a href=\"https://github.com/google/box2d.dart\">Box2D</a>.</p>\n<p>The whole concept of a box2d's World is mapped to the <code class=\"language-text\">Box2DComponent</code> component; every Body should be a <code class=\"language-text\">BodyComponent</code>, and added directly to the <code class=\"language-text\">Box2DComponent</code>, and not to the game list.</p>\n<p>So you can have HUD and other non-physics-related components in your game list, and also as many <code class=\"language-text\">Box2DComponents</code> as you'd like (normally one, I guess), and then add your physical entities to your Components instance. When the Component is updated, it will use box2d physics engine to properly update every child.</p>\n<p>You can see a more complete example of box2d usage on <a href=\"https://github.com/feroult/haunt\">this WIP game</a> made by @feroult (beware, though, it uses 0.6.x version of flame, but the Box2D related apis are unchanged).</p>\n<h2 id=\"tiled-component\"><a href=\"#tiled-component\" aria-label=\"tiled component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tiled Component</h2>\n<p>Currently we have a very basic implementation of a Tiled component. This API uses the lib <a href=\"https://github.com/feroult/tiled.dart\">Tiled</a> to parse map files and render visible layers.</p>\n<p>A example of how to use the API can be found <a href=\"https://github.com/luanpotter/flame/tree/master/examples/tiled\">here</a>. </p>","frontmatter":{"path":"/docs/components","title":"Components"}}},"pageContext":{}}