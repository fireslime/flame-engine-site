{"data":{"markdownRemark":{"html":"<h1>Game Loop</h1>\n<p>The Game Loop module is a simple abstraction over the game loop concept. Basically most games are built upon two methods: </p>\n<ul>\n<li>The render method takes the canvas ready for drawing the current state of the game.</li>\n<li>The update method receives the delta time in seconds since last update and allows you to move the next state.</li>\n</ul>\n<p>The class <code class=\"language-text\">Game</code> can be subclassed and will provide both these methods for you to implement. In return it will provide you with a <code class=\"language-text\">widget</code> property that returns the game widget, that can be rendered in your app.</p>\n<p>You can either render it directly in your <code class=\"language-text\">runApp</code>, or you can have a bigger structure, with routing, other screens and menus for your game.</p>\n<p>To start, just add your game widget directly to your runApp, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Game game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyGameImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead of implementing the low level <code class=\"language-text\">Game</code> class, you should probably use the more full-featured <code class=\"language-text\">BaseGame</code> class.</p>\n<p>The <code class=\"language-text\">BaseGame</code> implements a <code class=\"language-text\">Component</code> based <code class=\"language-text\">Game</code> for you; basically it has a list of <code class=\"language-text\">Component</code>s and repasses the <code class=\"language-text\">update</code> and <code class=\"language-text\">render</code> calls appropriately. You can still extend those methods to add custom behavior, and you will get a few other features for free, like the repassing of <code class=\"language-text\">resize</code> methods (every time the screen is resized the information will be passed to the resize methods of all your components) and also a basic camera feature (that will translate all your non-HUD components in order to center in the camera you specified).</p>\n<p>A very simple <code class=\"language-text\">BaseGame</code> implementation example can be seen below:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCrate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpriteComponent</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// creates a component that renders the crate.png sprite, with size 16 x 16</span>\n        <span class=\"token function\">MyCrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSprite</span><span class=\"token punctuation\">(</span><span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crate.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token metadata symbol\">@override</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>Size size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// we don't need to set the x and y in the constructor, we can set then here</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyGame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseGame</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MyGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCrate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will call resize the first time as well</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"path":"/docs/game-loop","title":"Game loop"}}},"pageContext":{}}