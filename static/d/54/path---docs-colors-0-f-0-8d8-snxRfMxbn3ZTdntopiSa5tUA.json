{"data":{"markdownRemark":{"html":"<h1 id=\"colors-and-the-palette\"><a href=\"#colors-and-the-palette\" aria-label=\"colors and the palette permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Colors and the Palette</h1>\n<p>Throught your game you are going to need to use colors in lots of places. There are two classes on <code class=\"language-text\">dart:ui</code> that can be used, <code class=\"language-text\">Color</code> and <code class=\"language-text\">Paint</code>.</p>\n<p>The <code class=\"language-text\">Color</code> class is nothing but a wrapper over a single simple ARGB color in hexadecimal integer format, so, to create a Color object, just pass in the color as an integer in the ARGB format.</p>\n<p>You can use Dart's hexadecimal notation to make it really easy; for instance: <code class=\"language-text\">0xFF00FF00</code> is fully opaque green (the 'mask' would be <code class=\"language-text\">0xAARRGGBB</code>). Do note the first two hexadecimal digits are for the alpha channel (transparency), unlike on regular (non-A) RGB. The max(FF = 256) means fully opaque.</p>\n<p>There is a color enum to make it easy to use common colors; it is in the material flutter package:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'package:flutter/material.dart'</span> <span class=\"token operator\">as</span> material<span class=\"token punctuation\">;</span>\n\nColor color <span class=\"token operator\">=</span> material<span class=\"token punctuation\">.</span>Colors<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Some more complex methods might also take a Paint, which is a more complete option that allows you to define more options related to stroke, colors, filters, blends. However, normally when using even the more complex APIs, you want just an instance of a Paint representing just a single simple plain solid color.</p>\n<p>You can create such a Paint like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Paint green <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF00FF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To help that and also keep your game's color palette consistent, Flame adds the Palette class. You can use it to both easily access Colors and Paints where needed and also to define as constants the colors your game use, so you don't get those mixe up.</p>\n<p>The <code class=\"language-text\">BasicPalette</code> class is an example of what a palette can look like, and adds black and white as colors. So to use black or white you can access those directly from the BasicPalette; for example, using <code class=\"language-text\">color</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">TextConfig regular <span class=\"token operator\">=</span> <span class=\"token function\">TextConfig</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> BasicPalette<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or using <code class=\"language-text\">paint</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawRect</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> BasicPalette<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">.</span>paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, the idea is that you can create your own palette, following the <code class=\"language-text\">BasicPalette</code> example, and add the color palette/scheme of your game. Then you will be able to statically access any color in your components and classes, never mix up the RGBs anymore. Below is an example of a Palette implementation, from the example game <a href=\"https://github.com/luanpotter/bgug/blob/master/lib/palette.dart\">BGUG</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'dart:ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'package:flame/palette.dart'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Palette</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">static</span> PaletteEntry white <span class=\"token operator\">=</span> BasicPalette<span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> PaletteEntry toastBackground <span class=\"token operator\">=</span> <span class=\"token function\">PaletteEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFAC3232</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> PaletteEntry toastText <span class=\"token operator\">=</span> <span class=\"token function\">PaletteEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFDA9A00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> PaletteEntry grey <span class=\"token operator\">=</span> <span class=\"token function\">PaletteEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF404040</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> PaletteEntry green <span class=\"token operator\">=</span> <span class=\"token function\">PaletteEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF54a286</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An <code class=\"language-text\">PaletteEntry</code> is a const class that can hold information of a color, and has two attributes:</p>\n<ul>\n<li><code class=\"language-text\">color</code>: returns the <code class=\"language-text\">Color</code> specified</li>\n<li><code class=\"language-text\">paint</code>: creates a new <code class=\"language-text\">Paint</code> with the color specified. <code class=\"language-text\">Paint</code> is a non-const class, so this attribute actually creates a brand new instance every time it's called. It's safe to cascade mutations to this.</li>\n</ul>","frontmatter":{"path":"/docs/colors","title":"Colors and the Palette"}}},"pageContext":{}}