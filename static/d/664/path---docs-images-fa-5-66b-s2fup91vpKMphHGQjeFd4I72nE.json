{"data":{"markdownRemark":{"html":"<h1>Images</h1>\n<p>If you are using the Component module and doing something simple, you probably won't need to use these classes; use <code class=\"language-text\">SpriteComponent</code> or <code class=\"language-text\">AnimationComponent</code> instead.</p>\n<p>You must have an appropriate folder structure and add the files to the <code class=\"language-text\">pubspec.yaml</code> file, as explained above.</p>\n<p>It has to be a PNG file. It can have transparency.</p>\n<h2>Sprite</h2>\n<p>Flame offers a <code class=\"language-text\">Sprite</code> class that represents a piece of an image (or the whole).</p>\n<p>You can create a <code class=\"language-text\">Sprite</code> giving it a pre-loaded <code class=\"language-text\">Image</code> via the <code class=\"language-text\">fromImage</code> constructor, or you can use the nameless constructor to pass a file name and have the image loaded asynchronously.</p>\n<p>For example, this will create a sprite representing the whole image of the file passed, automatically triggering its loading:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Sprite player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You could also specify the coordinates in the original image where the sprite is located; this allows you to use sprite sheets and reduce the number of images in memory; for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Sprite playerFrame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The default values are <code class=\"language-text\">0.0</code> for <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> and <code class=\"language-text\">null</code> for <code class=\"language-text\">width</code> and <code class=\"language-text\">height</code> (meaning it will use the full width/height of the source image).</p>\n<p>The <code class=\"language-text\">Sprite</code> class has a <code class=\"language-text\">loaded</code> method that returns wether the image has been loaded, and a render method, that allows you to render the image into a <code class=\"language-text\">Canvas</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Sprite block <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'block.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// in your render method</span>\nblock<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//canvas, width, height</span></code></pre></div>\n<p>You must pass the size to the render method, and the image will be resized accordingly.</p>\n<p>The render method will do nothing while the sprite has not been loaded, so you don't need to worry. The image is cached in the <code class=\"language-text\">Images</code> class, so you can safely create many sprites with the same fileName.</p>\n<h2>Flame.images</h2>\n<p>The <code class=\"language-text\">Flame.images</code> is a lower level utility for loading images, very similar to the <code class=\"language-text\">Flame.audio</code> instance.</p>\n<p>Flutter has a collection of types related to images, and converting everything properly form a local asset to the Image that can be drawn on Canvas is a small pain. This class allows you to obtain an Image that can be drawn on a Canvas using the <code class=\"language-text\">drawImageRect</code> method.</p>\n<p>It automatically caches any image loaded by filename, so you can safely call it many times.</p>\n<p>To load and draw an image, you can use the <code class=\"language-text\">load</code> method, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string\">'package:flame/flame.dart'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// inside an async context</span>\nImage image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Flame<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or</span>\nFlame<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Image image<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> paint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect<span class=\"token punctuation\">.</span>fromLTWH</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawImageRect</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The methods for loading and clearing the cache are identical to the Audio ones: <code class=\"language-text\">load</code>, <code class=\"language-text\">loadAll</code>, <code class=\"language-text\">clear</code> and <code class=\"language-text\">clearAll</code>. They return a <code class=\"language-text\">Future</code> for the Image loaded.</p>\n<p>Also similarly to Audio, you can instantiate your own copy of <code class=\"language-text\">Images</code> (each instance shares a different cache):</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Image image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Images</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Animation</h2>\n<p>The Animation class helps you create a cyclic animation of sprites.</p>\n<p>You can create it by passing a list of equal sized sprites and the stepTime (that is, how many seconds it takes to move to the next frame):</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Animation a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animation<span class=\"token punctuation\">.</span>spriteList</span><span class=\"token punctuation\">(</span>sprites<span class=\"token punctuation\">,</span> stepTime<span class=\"token punctuation\">:</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A better alternative to generate a list of sprites is to use the <code class=\"language-text\">sequenced</code> constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">const</span> amountOfFrames <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nAnimation a <span class=\"token operator\">=</span> Animation<span class=\"token punctuation\">.</span><span class=\"token function\">sequenced</span><span class=\"token punctuation\">(</span><span class=\"token string\">'player.png'</span><span class=\"token punctuation\">,</span> amountOfFrames<span class=\"token punctuation\">,</span> textureWidth<span class=\"token punctuation\">:</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In which you pass the file name, the number of frames and the sprite sheet is automatically split for you according to the 4 optional parameters:</p>\n<ul>\n<li>textureX : x position on the original image to start (defaults to 0)</li>\n<li>textureY : y position on the original image to start (defaults to 0)</li>\n<li>textureWidth : width of each frame (defaults to null, that is, full width of the sprite sheet)</li>\n<li>textureHeight : height of each frame (defaults to null, that is, full height of the sprite sheet)</li>\n</ul>\n<p>So, in our example, we are saying that we have 8 frames for our player animation, and they are displayed in a row. So if the player height is also 16 pixels, the sprite sheet is 128x16, containing 8 16x16 frames.</p>\n<p>This constructor makes creating an Animation very easy using sprite sheets.</p>\n<p>If you use Aseprite for your animations, Flame does provide some support for Aseprite animation's JSON data, to use this feature, you will need to export the Sprite Sheet's JSON data, and use something like the following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">    Animation animation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Animation<span class=\"token punctuation\">.</span><span class=\"token function\">fromAsepriteData</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"chopper.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Sprite Sheet image path</span>\n      <span class=\"token string\">\"./assets/chopper.json\"</span> <span class=\"token comment\">// Sprite Sheet animation JSON data</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Note: trimmed sprite sheets are not supported by flame, so if you export your sprite sheet this way, it will have the trimmed size, not the sprite original size.</em></p>\n<p>Animations, after created, have an update and render method; the latter renders the current frame, and the former ticks the internal clock to update the frames.</p>\n<p>Animations are normally used inside <code class=\"language-text\">AnimationComponent</code>s, but custom components with several Animations can be created as well.</p>","frontmatter":{"path":"/docs/images","title":"Using images"}}},"pageContext":{}}